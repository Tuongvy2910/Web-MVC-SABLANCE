@model SABLANCE.Models.Order
@{
    var data = ViewBag.OrdersEdit as SABLANCE.Models.Order;
    var dataOrDetails = ViewBag.OrDetail as List<SABLANCE.Models.OrderDetail>;
    var dataStatus = ViewBag.OrderStt as List<SABLANCE.Models.OrderStatu>;
    var dataEm = ViewBag.EmployeeOrder as List<SABLANCE.Models.Employee>;
    var dataCus = ViewBag.CustomerData as List<SABLANCE.Models.Customer>;
    var dataPro = ViewBag.ListProduct as List<SABLANCE.Models.ProductDetail>;
    var ListProduct = ViewBag.ProductOrder as List<SABLANCE.Models.ProductDetail>;
}
@using Newtonsoft.Json;
@{
    var jsonSettings = new Newtonsoft.Json.JsonSerializerSettings
    {
        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
    };

    var jsonCus = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ProductOrder, jsonSettings);
}

<link href="~/Content/orderadmin.css" rel="stylesheet" />
<div class="modal-body" id="EditViewModalContent">
    <div class="col-lg-12" style="border-bottom:0.2px solid; margin-bottom: 10px;">
        <div class="row">

            <div class="col-lg-4" style="align-self: end;">
                <div class="form-group">
                    <label>Số đơn đặt hàng <span class="required">*</span></label>
                    <input id="OrderID" disabled="disabled" value="@data.ID" style="display: none;" />
                    <input id="OrderNo" disabled="disabled" value="@data.OrderNo.Trim()" name="Code" type="text" class="form-control" />
                    <div id="CodeError" class="error-message" style="color: red; font-size: 11px;"></div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Nhân viên tạo đơn</label>
                    <select id="EmployeeID" name="EmployeeID" class="form-control">
                        @foreach (var item in dataEm)
                        {
                            <option value="@item.ID" @(item.ID == data.EmployeeID ? "selected" : "")>@item.Code | @item.LastName @item.FirstName</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Khách hàng đặt đơn</label>
                    <select id="CustomerID" name="CustomerID" disabled class="form-control">
                        @foreach (var item in dataCus)
                        {
                            <option value="@item.ID" @(item.ID == data.CustomerID ? "selected" : "")>@item.Code | @item.LastName @item.FirstName</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label>Địa chỉ </label>

                    @if (!string.IsNullOrEmpty(data.DeliveryAddress))
                    {
                        <textarea id="Address" name="Address" type="text" class="form-control col-lg-12" style="float: none !important;" placeholder="Địa chỉ trống"> @data.DeliveryAddress</textarea>
                    }
                    else
                    {
                        <textarea id="Address" name="Address" type="text" class="form-control col-lg-12" style="float: none !important;" placeholder="Địa chỉ trống"></textarea>
                    }
                    <div id="AddressError" class="error-message" style="color: red; font-size: 11px;"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Số điện thoại <span class="required">*</span> </label>
                    <input id="Phone" name="Phone" type="number" value="@data.RecipientPhone.Trim()" class="form-control" placeholder="Nhập số điện thoại"/>
                    <div id="phoneError" class="error-message" style="color: red; font-size: 11px;"></div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Phương thức thanh toán <span class="required">*</span></label>
                    <select id="Paymenthods" name="Paymenthods" class="form-control">
                        <option value="Tiền mặt(COD)" @(data.PaymentMethods == "Tiền mặt(COD)" ? "selected" : "")>Tiền mặt(COD)</option>
                        <option value="Thẻ Visa/Master" @(data.PaymentMethods == "Thẻ Visa/Master" ? "selected" : "")>Thẻ Visa/Master</option>
                        <option value="Ví Momo" @(data.PaymentMethods == "Ví Momo" ? "selected" : "")>Ví Momo</option>
                        <option value="Ví điện tử VNPay" @(data.PaymentMethods == "Ví điện tử VNPay" ? "selected" : "")>Ví điện tử VNPay</option>
                    </select>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Ngày đặt hàng</label>
                    <input id="OrderDate" name="OrderDate" value="@(data.OrderDate != null ? data.OrderDate.ToString("yyyy-MM-dd") : "")" disabled type="date" class="form-control" />

                    <div id="OrderDateError" class="error-message" style="color: red; font-size: 11px;"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Điểm tích lũy của đơn hàng</label>
                    @if (@ViewBag.PointOrder != null)
                    {
                        <input value="@ViewBag.PointOrder" class="form-control" disabled />
                    }
                    else
                    {
                        <input value="Không cập nhật được điểm" class="form-control" disabled />
                    }

                </div>
            </div>
            <div class="col-lg-8">
                <div class="form-group">
                    <label>Tình trạng đơn hàng</label>
                    <select id="OrderStatus" name="OrderStatus" class="form-control">
                        @if (ViewBag.LatestOrderStatusId != 0)
                        {
                            foreach (var item in dataStatus)
                            {
                                <option value="@item.ID" @(item.ID == ViewBag.LatestOrderStatusId ? "selected" : "")>@item.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0"> Xác nhận tình trạng đơn hàng </option>
                            foreach (var item in dataStatus)
                            {
                                <option value="@item.ID">@item.Name</option>
                            }
                        }


                    </select>
                    <div id="OrderStatusError" class="error-message" style="color: red; font-size: 11px;"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label>Ghi chú đơn hàng </label>
                    
                    @if (!string.IsNullOrEmpty(data.Note))
                    {
                        <textarea id="Note" name="Note" class="form-control" placeholder="Đơn hàng không có ghi chú. Bạn có thể nhập ghi chú cho đơn hàng."> @data.Note</textarea>
                    }
                    else
                    {
                <textarea id="Note" name="Note" class="form-control" placeholder="Đơn hàng không có ghi chú. Bạn có thể nhập ghi chú cho đơn hàng."></textarea>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label>Danh sách sản phẩm</label>
                    <select id="ProductID" name="ProductID" class="form-control" onchange="displayCustomerDetails(this.value);">
                        @foreach (var item in dataPro)
                        {
                            var displayText = $"Mã MH: {item.Code}";

                            if (item.Product != null)
                            {
                                displayText += $" | Tên: {item.Product.Name}";
                            }

                            if (item.Size != null)
                            {
                                displayText += $" | Size: {item.Size.Name}";
                            }

                            if (item.Color != null)
                            {
                                displayText += $" | Màu: {item.Color.Name}";
                            }

                            <option value="@item.ID">@displayText</option>
                        }
                    </select>
                    <div id="TotalOrdersError" class="error-message" style="color: red; font-size: 11px;"></div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
            <button type="button" id="edit-order" class="btn btn-primary">Cập nhật đơn</button>
        </div>
    </div>
    <div class="col-lg-12">
        <div class="row" id="showcus" style="margin-top: 10px;">
            <h3>DANH SÁCH SẢN PHẨM</h3>
            <table id="customer-table" class=" col-lg-12 table table-bordered table-responsives table-striped">
                <thead>
                    <tr>

                        <th>ID </th>
                        <th>Mã mặt hàng</th>
                        <th>Tên mặt hàng</th>
                        <th>Màu sắc</th>
                        <th>Kích thước</th>
                        <th>Số lượng mua</th>
                        <th>Đơn giá</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="cusMem">
                    @if (dataOrDetails.Count > 0)
                    {
                        foreach (var pro in dataOrDetails)
                        {
                            <tr>
                                <td id="proID">@pro.ProductID</td>
                                <td>@pro.ProductDetail.Code</td>
                                <td>@pro.ProductDetail.Product.Name</td>
                                <td style="text-align: center;">
                                    <a style="background-color: @pro.ProductDetail.Color.Code" class="color"> <span class="color-name"></span></a>
                                </td>
                                <td style="text-align: center;">
                                    @if (pro.ProductDetail.SizeID.HasValue)
                                    {
                                        <a>@pro.ProductDetail.Size.Name</a>
                                    }
                                    else
                                    {
                                        <a>SP không bao gồm size</a>
                                    }
                                </td>
                                <td style="text-align: center;" >
                                <input class="form-control" value="@pro.Quantity" id="QuantityPro"/>
                                </td>
                                <td style="text-align: center;" id="proPrices">@pro.Price</td>
                                <td style="text-align: center;">
                                    <a onclick="deleteCustomer(this);">
                                        <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0,0,255.99603,255.99603">
                                            <g fill="#000" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-size="none" style="mix-blend-mode: normal"><g transform="scale(10.66667,10.66667)"><path d="M10,2l-1,1h-6v2h18v-2h-6l-1,-1zM4.36523,7l1.70313,15h11.86328l1.70313,-15z"></path></g></g>
                                        </svg>
                                    </a>
                                </td>
                            </tr>

                        }
                        <tr id="trow"> </tr>
                    }

                    else
                    {
                        <tr id="trow"> </tr>
                    }
                </tbody>

            </table>
        </div>

        <div class="modal-footer">
            <label>Tổng tiền:<input type="text" disabled class="form-control" value="@data.TotalPayment" id="TotalOrders" /> </label>




        </div>
    </div>
</div>







<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js" defer></script>
<script src="~/Scripts/orderadmin.js"></script>
<script>

    $(document).ready(function () {
        var citis = $("#city");
        var districts = $("#district");
        var wards = $("#ward");

        // Gọi API hoặc sử dụng một nguồn dữ liệu khác
        var dataUrl = "https://raw.githubusercontent.com/kenzouno1/DiaGioiHanhChinhVN/master/data.json";

        // Lấy dữ liệu tỉnh/thành phố từ nguồn dữ liệu
        $.getJSON(dataUrl, function (data) {
            renderOptions(citis, data, "Chọn Tỉnh/Thành");
            citis.on("change", function () {
                var selectedCity = $("#city").val();
                console.log("Selected City: " + selectedCity);

                districts.empty();
                wards.empty();

                if (selectedCity !== "") {
                    var selectedCityData = data.find(n => n.Id === selectedCity);
                    renderOptions(districts, selectedCityData.Districts, "Chọn Quận/Huyện");
                }
                else if (selectedCity === "") {
                    renderOptions(districts, [], "Chọn Quận/Huyện");
                    renderOptions(wards, [], "Chọn Phường/Xã");
                }
            });
            districts.on("change", function () {
                var selectedDistrict = $(this).val();

                wards.empty();

                if (selectedDistrict !== "") {
                    var selectedDistrictData = data
                        .flatMap(city => city.Districts)
                        .find(district => district.Id === selectedDistrict);
                    renderOptions(wards, selectedDistrictData.Wards, "Chọn Phường/Xã");
                }
                else if (selectedDistrict === "" || selectedCity === "") {
                    renderOptions(wards, [], "Chọn Phường/Xã");
                }
            });
        });



        // Hàm hiển thị danh sách lựa chọn
        function renderOptions(selectElement, optionsData, defaultOptionText) {
            selectElement.append("<option value=''>" + defaultOptionText + "</option>");

            $.each(optionsData, function (index, option) {
                selectElement.append("<option value='" + option.Id + "'>" + option.Name + "</option>");
            });
        }
    });

</script>
<script type="text/javascript">
    $(document).ready(function () {
        // Lắng nghe sự kiện khi số lượng hoặc giá thay đổi
        $(document).ready(function () {
            $('body').on('input', '#QuantityPro', function () {
                updateTotal();
                var errorContainer = $(this).closest('tr').find('.error-message'); // Tìm errorContainer trong cùng một dòng
                errorContainer.text("");
            });
        });
         //Hàm cập nhật tổng tiền
        function updateTotal() {

            var quantity = $('#QuantityPro').val();
            var total = 0;
            // Duyệt qua mỗi dòng sản phẩm
            $('#cusMem tr').each(function () {
                console.log(total);
                
                var quantity = parseFloat($(this).find('#QuantityPro').val()) || 0;
                var price = parseFloat($(this).find('#proPrices').text()) || 0;
                total += quantity * price;
                console.log('Total:', total);
                console.log('Quantity:', quantity);
                console.log('Prices:', price);
            });

            

            // Cập nhật giá trị vào ô tổng tiền
            $('#TotalOrders').val(total); // Làm tròn đến 2 chữ số thập phân
        }
    });
    function deleteCustomer(button) {
        // Lấy đối tượng tr (dòng) chứa nút xóa
        var row = $(button).closest("tr");
        
        // Xóa dòng khỏi bảng
        row.remove();
        var total = 0;
        // Duyệt qua mỗi dòng sản phẩm
        $('#cusMem tr').each(function () {
            console.log(total);

            var quantity = parseFloat($(this).find('#QuantityPro').val()) || 0;
            var price = parseFloat($(this).find('#proPrices').text()) || 0;
            total += quantity * price;
            console.log('Total:', total);
            console.log('Quantity:', quantity);
            console.log('Prices:', price);
        });



        // Cập nhật giá trị vào ô tổng tiền
        $('#TotalOrders').val(total);
    }
    var dataCus = @Html.Raw(jsonCus);
        function formatDate(date) {
            var options = { day: 'numeric', month: 'numeric', year: 'numeric' };
            return date ? new Date(date).toLocaleDateString('vi-VN', options) : '';
        }

        function updateRow(row, data) {
            row.innerHTML = '<td id="proID">' + data.Id + '</td>' +
                '<td id="proCode">' + data.Code + '</td>' +
                '<td id="proName">' + data.Name + '</td>' +
                '<td id="proColor" style="text-align: center;">' +
                '<a style="background-color: '+ data.Color +';" class="color"> <span class="color-name"></span></a></td>' +
                '<td id="proSize" style="text-align: center;">' + data.Size + '</td>' +
                '<td id="proQuatity">' +
                '<input id="QuantityPro" type = "number" class="orquantity form-control"/>' +
                '<div id="ProQuantityError" class="error-message" style="color: red; font-size: 11px;"></div>'+
                '</td >' +
                '<td id="proPrices">' + data.Prices + '</td>' +
                ' <td style="text-align: center;"> ' +
                                        '<a onclick="deleteCustomer(this);"> ' +
                                            '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0,0,255.99603,255.99603">' +
                                                '<g fill="#000" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-size="none" style="mix-blend-mode: normal"><g transform="scale(10.66667,10.66667)"><path d="M10,2l-1,1h-6v2h18v-2h-6l-1,-1zM4.36523,7l1.70313,15h11.86328l1.70313,-15z"></path></g></g> ' +
                                            '</svg>' +
                                        '</a>' +
                                    '</td>';
        }
        
        function addEmptyRow() {
            var tbody = document.getElementById("cusMem");
            var templateRow = document.getElementById("trow");
            var newRow = templateRow.cloneNode(true);

            // Loại bỏ id "trow" để nó không bị xem là dòng trống nữa
            newRow.id = "";
            tbody.appendChild(newRow);
        }

    function displayCustomerDetails(selectedCustomerId) {
        var selectedCustomer = dataCus.find(a => a.Id == selectedCustomerId);
        var checkdata = document.getElementById("cusMem").querySelectorAll("td#proID");
        document.getElementById("showcus").style.display = "block";
        var isDuplicate = Array.from(checkdata).some(function (checkdata) {
            return checkdata.innerHTML === selectedCustomer.Id.toString();
        });
        var tbody = document.getElementById("cusMem");
        var existingRows = tbody.querySelectorAll("tr:not(#trow)");
        var emptyRow = Array.from(existingRows).find(row => row.innerHTML.trim() === '');

        if (!isDuplicate) {

            if (emptyRow) {
                // Nếu có dòng trống, cập nhật nó với dữ liệu mới
                updateRow(emptyRow, selectedCustomer);
                addEmptyRow(); // Thêm dòng trống mới
            } else {
                // Nếu không có dòng trống, thêm một dòng mới
                addNewRow(selectedCustomer);
            }
        }
        else {
            alert("Dòng có ID trùng đã tồn tại!");
        }
    }

    function addNewRow(data) {
        var tbody = document.getElementById("cusMem");
        var templateRow = document.getElementById("trow");
        var newRow = templateRow.cloneNode(true);

        // Loại bỏ id "trow" để nó không bị xem là dòng trống nữa
        newRow.id = "";

        // Thiết lập nội dung cho các ô trong dòng mới
        updateRow(newRow, data);

        // Thêm dòng mới vào tbody
        tbody.appendChild(newRow);

        // Tạo thêm dòng trống mới
        addEmptyRow();
    }

    // Hàm khởi tạo dòng trống đầu tiên
    addEmptyRow();

    $(document).ready(function () {
        
    function EditOrderAction() {
        if (checkEditOrder()) {
            var ID = $('#OrderID').val();
            var Code = $('#OrderNo').val();
            var EmployeeID = $('#EmployeeID').val();
            var CustomerID = $('#CustomerID').val();
            var DateOrder = $('#OrderDate').val();
            var Status = $('#OrderStatus').val();
            var Phone = $('#Phone').val();
            var Note = $('#Note').val();
            var Total = $('#TotalOrders').val();
            var PaymentMethod = $('#Paymenthods').val();
            var addressString = $('#Address').val();
            var proIds = $('[id^="proID"]').map(function () {
                return $(this).text();
            }).get();
            var Quatity = $('[id^="QuantityPro"]').map(function () {
                return $(this).val();
            }).get();

            var ProPrices = $('[id^="proPrices"]').map(function () {
                return $(this).text();
            }).get();


            console.log(proIds);
            console.log(Quatity);
            console.log(ProPrices);

            if (proIds.length > 0) {

                $.ajax({
                    url: '@Url.Action("EditOrder")',
                    type: 'POST',
                    data: {
                        ID: ID,
                        OrderNo: Code,
                        EmployeeID: EmployeeID,
                        CustomerID: CustomerID,
                        OrderDate: DateOrder,
                        RecipientPhone: Phone,
                        TotalPayment: Total,
                        PaymentMethods: PaymentMethod,
                        DeliveryAddress: addressString,
                        productId: proIds,
                        quantity: Quatity,
                        Prices: ProPrices,
                        Note: Note,
                        status: Status,
                    },
                    success: function (data) {
                        console.log(data);
                        if (data.status == 1) {
                            window.location.href = '@Url.Action("ListOrder", "Orders")';
                            alert(data.text);
                        } else {
                            alert(data.text);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('Đã có lỗi xảy ra cập nhật đơn hàng.');
                    }
                });
            }
            else {
                alert('vui lòng chọn sản phẩm.');
            }

        }

    }


    // Gọi hàm createAction() khi nhấn nút "Thêm khách hàng"
    $('#edit-order').on('click', function (event) {
        EditOrderAction()
    });

});



</script>
