@model SABLANCE.Models.MemberRating
@{
    var data = ViewBag.EditMember as SABLANCE.Models.MemberRating;
    var dataCus = ViewBag.dataMember as List<SABLANCE.Models.Customer>;
    var dataCustomer = ViewBag.dataCutomer  as List<SABLANCE.Models.Customer>;
}
@using Newtonsoft.Json;
@{
    var jsonSettings = new Newtonsoft.Json.JsonSerializerSettings
    {
        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
    };

    var jsonCus = Newtonsoft.Json.JsonConvert.SerializeObject(dataCustomer, jsonSettings);
}

<link href="~/Content/customeadmin.css" rel="stylesheet" />

<div class="modal-body" id="EditViewModalContent">
    <div class="col-lg-12" style="margin-bottom: 10px;">
        <div class="row">
            <input id="memberId" value="@data.ID" style="display: none;" />
            <div class="col-lg-4" style="align-self: end;">
                <div class="form-group">
                    <label>Mã định danh <span class="required">*</span></label>
                    <input id="Code" disabled="disabled" value="@data.Code" name="Code" type="text" class="form-control" />
                    <div id="CodeError" class="error-message" style="color: red; font-size: 11px;"></div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Tên loại thành viên <span class="required">*</span></label>
                    <input id="Name" name="LastName" type="text" value="@data.Name" class="form-control" placeholder="Nhập tên loại thành viên" />
                    <div id="NameMemberError" class="error-message" style="color: red; font-size: 11px;"></div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Khách hàng thuộc thành viên</label>
                    <select id="MemberRatingsID" name="MemberRatingsID" class="form-control" onchange="displayCustomerDetails(this.value);">
                        <option value="0"> Chọn khách hàng </option>
                        @foreach (var list in dataCustomer)
                        {

                            <option value="@list.ID"> @list.LastName @list.FirstName </option>
                            
                        }

                    </select>
                </div>
            </div>
        </div>
        <div class="col-lg-12" style="border-top: 0.2px solid #000; border-bottom: none !important;">
            <div class="row" id="showcus" style="margin-top: 10px;">
                <h3>DANH SÁCH KHÁCH HÀNG</h3>
                <table id="customer-table" class=" col-lg-12 table table-bordered table-responsives table-striped">
                    <thead>
                        <tr>

                            <th>ID </th>
                            <th>Họ</th>
                            <th>Tên</th>
                            <th>Ngày sinh</th>
                            <th>Số điện thoại</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="cusMem">
                        @if (dataCus.Count > 0)
                        {
                            foreach (var item in dataCus)
                            {
                                <tr id="trow_@item.ID">
                                    <td>@item.ID</td>
                                    <td>@item.LastName</td>
                                    <td>@item.FirstName</td>
                                    <td>
                                        @if (item.DateOfBirth.HasValue)
                                        {
                                            @item.DateOfBirth.Value.ToString("dd/MM/yyyy")
                                        }
                                        else
                                        {
                                            <a>N/A</a>
                                        }
                                    </td>
                                    <td>@item.Phone</td>
                                    <td style="text-align: center;">
                                        <a onclick="deleteCustomer(@item.ID);">
                                            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0,0,255.99603,255.99603">
                                                <g fill="#000" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-size="none" style="mix-blend-mode: normal"><g transform="scale(10.66667,10.66667)"><path d="M10,2l-1,1h-6v2h18v-2h-6l-1,-1zM4.36523,7l1.70313,15h11.86328l1.70313,-15z"></path></g></g>
                                            </svg>
                                        </a>
                                    </td>
                                </tr>
                            }
                            <tr id="trow"> </tr>
                        }
                        else
                        {
                            <tr id="trow"> </tr>
                        }


                    </tbody>

                </table>

            </div>

            <div class="modal-footer">
                <button type="button" id="edit-member" class="btn btn-primary">Cập nhật</button>
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/member.js"></script>

<script>

    var jsonCus = @Html.Raw(jsonCus);
    console.log(@Html.Raw(jsonCus));


    function formatDate(date) {
        var options = { day: 'numeric', month: 'numeric', year: 'numeric' };
        return date ? new Date(date).toLocaleDateString('vi-VN', options) : '';
    }

    function updateRow(row, data) {
        row.innerHTML = '<td id="cusID">' + data.ID + '</td>' +
            '<td id="cusLastName">' + data.LastName + '</td>' +
            '<td id="cusFirstName">' + data.FirstName + '</td>' +
            '<td id="cusDateOfBirth">' + formatDate(data.DateOfBirth) + '</td>' +
            '<td id="cusPhone">' + data.Phone + '</td>';
        '<td >'+ + '</td>';
    }

    function addEmptyRow() {
        var tbody = document.getElementById("cusMem");
        var templateRow = document.getElementById("trow");
        var newRow = templateRow.cloneNode(true);

        // Loại bỏ id "trow" để nó không bị xem là dòng trống nữa
        newRow.id = "";
        tbody.appendChild(newRow);
    }

    function displayCustomerDetails(selectedCustomerId) {
        var selectedCustomer = jsonCus.find(a => a.ID == selectedCustomerId);
        var checkdata = document.getElementById("cusMem").querySelectorAll("td#cusID");

        var isDuplicate = Array.from(checkdata).some(function (checkdata) {
            return checkdata.innerHTML === selectedCustomer.ID.toString();
        });
        var tbody = document.getElementById("cusMem");
        var existingRows = tbody.querySelectorAll("tr:not(#trow)");
        var emptyRow = Array.from(existingRows).find(row => row.innerHTML.trim() === '');

        if (!isDuplicate) {

            if (emptyRow) {
                // Nếu có dòng trống, cập nhật nó với dữ liệu mới
                updateRow(emptyRow, selectedCustomer);
                addEmptyRow(); // Thêm dòng trống mới
            } else {
                // Nếu không có dòng trống, thêm một dòng mới
                addNewRow(selectedCustomer);
            }
        }
            else
            {
                alert("Dòng có ID trùng đã tồn tại!");
            }
    }

    function addNewRow(data) {
        var tbody = document.getElementById("cusMem");
        var templateRow = document.getElementById("trow");
        var newRow = templateRow.cloneNode(true);

        // Loại bỏ id "trow" để nó không bị xem là dòng trống nữa
        newRow.id = "";

        // Thiết lập nội dung cho các ô trong dòng mới
        updateRow(newRow, data);

        // Thêm dòng mới vào tbody
        tbody.appendChild(newRow);

        // Tạo thêm dòng trống mới
        addEmptyRow();
    }

    // Hàm khởi tạo dòng trống đầu tiên
    addEmptyRow();
    function deleteCustomer(customerId) {
        // Hiển thị hộp thoại xác nhận hoặc thực hiện xóa trực tiếp

        // Lấy phần tử tr (dòng) cần xóa
        var rowToDelete = $("#trow_" + customerId);

        // Kiểm tra xem có phải là phần tử tr không


         $.ajax({
            url: '@Url.Action("DeleteCustomerMember", "Customer")',
            type: 'POST',
            data: {
                Id: customerId
            },
            success: function (data) {
                if (data.status === 1) {
                    if (rowToDelete.length > 0) {
                        // Xóa dòng khỏi DOM
                        rowToDelete.remove();
                    } else {
                        console.log("Không tìm thấy dòng cần xóa");
                    }
                    alert(data.text);
                } else {
                    // Xử lý trường hợp không thành công nếu cần
                }
            },
            error: function (xhr, status, error) {
                console.log(error);
                alert('Đã có lỗi xảy ra khi xóa khách hàng.');
            }
        });
    }


    function editAction(memberID) {
                if (checkMember()) {
                    var Code = $('#Code').val();
                    var Name = $('#Name').val();
                    var cusIds = $('[id^="cusID"]').map(function () {
                        return $(this).text();
                    }).get();

                   if (cusIds.length >= 0) {
            // Gửi danh sách giá trị lên server
            $.ajax({
                url: '@Url.Action("EditMember")',
                type: 'POST',
                data: {
                    customerId: cusIds, // Truyền danh sách giá trị IDs vào controller
                    ID: memberID,
                    Code: Code,
                    Name: Name,
                },
                success: function (data) {
                    console.log(data);
                    if (data.status == 1) {
                        window.location.href = '@Url.Action("ListMemberRatings", "Customer")';
                        alert(data.text);
                    } else {
                        alert(data.text);
                    }
                },
                error: function (xhr, status, error) {
                    alert('Đã có lỗi xảy ra cập nhật loại thành viên.');
                }
            });
        } else {
            alert("Không thể lấy danh sách giá trị ID.");
        }
                }
            }
            $('#edit-member').on('click', function (event) {
                var memberID = "@data.ID"/* Lấy giá trị ID từ đâu đó */;
                editAction(memberID);
            });
</script>
